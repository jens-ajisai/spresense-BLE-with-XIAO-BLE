diff --git a/src/local/BLELocalDevice.cpp b/src/local/BLELocalDevice.cpp
index 91cc869..45b90a6 100644
--- a/src/local/BLELocalDevice.cpp
+++ b/src/local/BLELocalDevice.cpp
@@ -84,6 +84,7 @@ int BLELocalDevice::begin()
   pinMode(NINA_CTS, INPUT);
 #endif
 
+  delay(500);
   if (!HCI.begin()) {
     end();
     return 0;
@@ -180,6 +181,12 @@ int BLELocalDevice::begin()
 
   GATT.begin();
 
+  static uint8_t randAddr[] = {0xC9, 0xC8, 0x75, 0x00, 0x0A, 0xEF};
+  static uint8_t phySetting[] = {0x00, 0x01, 0x01};
+
+  HCI.sendCommand(OGF_LE_CTL << 10 | 0x31, 3, phySetting);
+  HCI.leSetRandomAddress(randAddr);
+
   return 1;
 }
 
diff --git a/src/utility/ATT.cpp b/src/utility/ATT.cpp
index 439b88e..1f9bd2b 100644
--- a/src/utility/ATT.cpp
+++ b/src/utility/ATT.cpp
@@ -112,7 +112,7 @@ ATTClass::~ATTClass()
 
 bool ATTClass::connect(uint8_t peerBdaddrType, uint8_t peerBdaddr[6])
 {
-  if (HCI.leCreateConn(0x0060, 0x0030, 0x00, peerBdaddrType, peerBdaddr, 0x00,
+  if (HCI.leCreateConn(0x0060, 0x0030, 0x00, peerBdaddrType, peerBdaddr, 0x01,
                         0x0006, 0x000c, 0x0000, 0x00c8, 0x0004, 0x0006) != 0) {
     return false;
   }
diff --git a/src/utility/BLEUuid.cpp b/src/utility/BLEUuid.cpp
index fba6244..711ff87 100644
--- a/src/utility/BLEUuid.cpp
+++ b/src/utility/BLEUuid.cpp
@@ -30,6 +30,7 @@ BLEUuid::BLEUuid(const char * str) :
   memset(_data, 0x00, sizeof(_data));
 
   _length = 0;
+  if (str != NULL) {
   for (int i = strlen(str) - 1; i >= 0 && _length < BLE_UUID_MAX_LENGTH; i -= 2) {
     if (str[i] == '-') {
       i++;
@@ -50,6 +51,7 @@ BLEUuid::BLEUuid(const char * str) :
     _length = 16;
   }
 }
+}
 
 const char* BLEUuid::str() const
 {
@@ -65,6 +67,49 @@ uint8_t BLEUuid::length() const
 {
   return _length;
 }
+char* ultoa( unsigned long value, char *string, int radix )
+{
+  char tmp[33];
+  char *tp = tmp;
+  long i;
+  unsigned long v = value;
+  char *sp;
+  if ( string == NULL )
+  {
+    return 0;
+  }
+
+  if (radix > 36 || radix <= 1)
+  {
+    return 0;
+  }
+
+  while (v || tp == tmp)
+  {
+    i = v % radix;
+    v = v / radix;
+    if (i < 10)
+      *tp++ = i+'0';
+    else
+      *tp++ = i + 'a' - 10;
+  }
+
+  sp = string;
+
+
+  while (tp > tmp)
+    *sp++ = *--tp;
+  *sp = 0;
+
+  return string;
+}
+
+char* utoa( unsigned int value, char *string, int radix )
+{
+  return ultoa( value, string, radix ) ;
+}
+
+
 
 const char* BLEUuid::uuidToString(const uint8_t* data, uint8_t length)
 {
diff --git a/src/utility/GAP.cpp b/src/utility/GAP.cpp
index f3ee32f..773501b 100644
--- a/src/utility/GAP.cpp
+++ b/src/utility/GAP.cpp
@@ -22,7 +22,7 @@
 
 #include "GAP.h"
 
-#define GAP_MAX_DISCOVERED_QUEUE_SIZE 5
+#define GAP_MAX_DISCOVERED_QUEUE_SIZE 30
 
 #define GAP_ADV_IND (0x00)
 #define GAP_ADV_SCAN_IND (0x02)
@@ -54,7 +54,7 @@ int GAPClass::advertise(uint8_t* advData, uint8_t advDataLen, uint8_t* scanData,
 
   stopAdvertise();
 
-  if (HCI.leSetAdvertisingParameters(_advertisingInterval, _advertisingInterval, type, 0x00, 0x00, directBdaddr, 0x07, 0) != 0) {
+  if (HCI.leSetAdvertisingParameters(_advertisingInterval, _advertisingInterval, type, 0x01, 0x00, directBdaddr, 0x07, 0) != 0) {
     return 0;
   }
 
@@ -87,7 +87,7 @@ int GAPClass::scan(bool withDuplicates)
   HCI.leSetScanEnable(false, true);
 
   // active scan, 10 ms scan interval (N * 0.625), 10 ms scan window (N * 0.625), public own address type, no filter
-  if (HCI.leSetScanParameters(0x01, 0x0010, 0x0010, 0x00, 0x00) != 0) {
+  if (HCI.leSetScanParameters(0x01, 0x0010, 0x0010, 0x01, 0x00) != 0) {
     return false;
   }
 
@@ -217,7 +217,9 @@ void GAPClass::handleLeAdvertisingReport(uint8_t type, uint8_t addressType, uint
   if (discoveredDevice == NULL) {
     if (_discoveredDevices.size() >= GAP_MAX_DISCOVERED_QUEUE_SIZE) {
       // drop
-      return;
+      BLEDevice* device = _discoveredDevices.remove(0);
+      if (device != NULL)
+        delete device;
     }
 
     discoveredDevice = new BLEDevice(addressType, address);
diff --git a/src/utility/HCI.cpp b/src/utility/HCI.cpp
index 773f4f1..a8f82bb 100644
--- a/src/utility/HCI.cpp
+++ b/src/utility/HCI.cpp
@@ -43,6 +43,7 @@
 
 #define EVT_LE_CONN_COMPLETE      0x01
 #define EVT_LE_ADVERTISING_REPORT 0x02
+#define EVT_LE_ENHANCED_CONNECTION_COMPLETE 0x0A
 
 
 // OGF_LINK_CTL
@@ -135,61 +136,112 @@ void HCIClass::poll(unsigned long timeout)
     HCITransport.wait(timeout);
   }
 
-  while (HCITransport.available()) {
-    byte b = HCITransport.read();
-	
-    if (_recvIndex >= sizeof(_recvBuffer)) {
-        _recvIndex = 0;
-        if (_debug) {
-            _debug->println("_recvBuffer overflow");
-        }
-    }
-
-    _recvBuffer[_recvIndex++] = b;
-
-    if (_recvBuffer[0] == HCI_ACLDATA_PKT) {
-      if (_recvIndex > 5 && _recvIndex >= (5 + (_recvBuffer[3] + (_recvBuffer[4] << 8)))) {
-        if (_debug) {
-          dumpPkt("HCI ACLDATA RX <- ", _recvIndex, _recvBuffer);
+while (HCITransport.available()) {
+        byte b = HCITransport.read();
+        _recvBuffer[_recvIndex++] = b;
+        //Legacy index catch left as backup, hopefully redundant
+        if (_recvIndex > sizeof(_recvBuffer) - 1) {
+            if (_debug) _debug->println("Index catch");
+            _recvIndex = 0;
         }
+        if (_recvBuffer[0] == HCI_ACLDATA_PKT) {
+            if ((_recvIndex > 5) && _recvIndex >= (5 + (_recvBuffer[3] + (_recvBuffer[4] << 8)))) {
+                if (_debug) {
+                    dumpPkt("HCI ACLDATA RX <- ", _recvIndex, _recvBuffer);
+                }
 #ifdef ARDUINO_AVR_UNO_WIFI_REV2
-        digitalWrite(NINA_RTS, HIGH);
+                digitalWrite(NINA_RTS, HIGH);
 #endif
-        int pktLen = _recvIndex - 1;
-        _recvIndex = 0;
+                int pktLen = _recvIndex - 1;
+                _recvIndex = 0;
 
-        handleAclDataPkt(pktLen, &_recvBuffer[1]);
+                handleAclDataPkt(pktLen, &_recvBuffer[1]);
 
 #ifdef ARDUINO_AVR_UNO_WIFI_REV2
-        digitalWrite(NINA_RTS, LOW);  
+                digitalWrite(NINA_RTS, LOW);
 #endif
-      }
-    } else if (_recvBuffer[0] == HCI_EVENT_PKT) {
-      if (_recvIndex > 3 && _recvIndex >= (3 + _recvBuffer[2])) {
-        if (_debug) {
-          dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
-        }
+            } else if (_recvIndex > 5 && ((5 + (_recvBuffer[3] + (_recvBuffer[4] << 8))) > (sizeof(_recvBuffer) - 1))) {
+                if (_debug) {
+                    _debug->print("ACL too big: "), _debug->println((5 + (_recvBuffer[3] + (_recvBuffer[4] << 8))));
+                    dumpPkt("HCI ACLDATA RX <- ", _recvIndex, _recvBuffer);
+                    _debug->println();
+                }
+                _recvIndex = 0;
+            }
+        } else if (_recvBuffer[0] == HCI_EVENT_PKT) {
+            if (_recvIndex > 3 && _recvIndex >= (3 + _recvBuffer[2])) {
+                bool ok_to_handle = false;
+                //Incoming data quality filter
+                switch (_recvBuffer[1]) {
+                    case EVT_DISCONN_COMPLETE:
+                    case EVT_CMD_COMPLETE:
+                    case EVT_CMD_STATUS:
+                    case EVT_NUM_COMP_PKTS:
+                        ok_to_handle = true;
+                        break;
+                    case EVT_LE_META_EVENT:
+                        //Advertisement quality filter, advert payloads are max 37 bytes, eirLength is on 14th byte eirData is 32 bytes
+                        if (_recvBuffer[3] == 0 || (_recvBuffer[3] > EVT_LE_ADVERTISING_REPORT && _recvBuffer[3] != EVT_LE_ENHANCED_CONNECTION_COMPLETE) ) {
+                            if (_debug) {
+                              // 04 0F 04 00 01 0D 20
+                                _debug->println("Bad Subevent Read");
+                                dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
+                                _debug->println();
+                            }
+                        } else if ((3 + _recvBuffer[2]) > 48) {
+                            if (_debug) {
+                                _debug->println("Advert too big");
+                                dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
+                                _debug->println();
+                            }
+                        } else if (_recvBuffer[13] > 32 && _recvBuffer[3] != EVT_LE_ENHANCED_CONNECTION_COMPLETE) {
+                            if (_debug) {
+                                _debug->print("eirLength too big: "), _debug->println(_recvBuffer[13]);
+                                dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
+                                _debug->println();
+                            }
+                        } else {
+                            ok_to_handle = true;
+                        }
+                        break;
+                    default:
+                        if (_debug) {
+                            _debug->println("Bad RX Event");
+                            dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
+                            _debug->println();
+                        }
+                        break;
+                }
+                if (ok_to_handle) {
+                    if (_debug) dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
 #ifdef ARDUINO_AVR_UNO_WIFI_REV2
-        digitalWrite(NINA_RTS, HIGH);
+                    digitalWrite(NINA_RTS, HIGH);
 #endif
-        // received full event
-        int pktLen = _recvIndex - 1;
-        _recvIndex = 0;
 
-        handleEventPkt(pktLen, &_recvBuffer[1]);
+                    // received full event
+                    int pktLen = _recvIndex - 1;
+                    _recvIndex = 0;
+                    handleEventPkt(pktLen, &_recvBuffer[1]);
 
 #ifdef ARDUINO_AVR_UNO_WIFI_REV2
-        digitalWrite(NINA_RTS, LOW);
+                    digitalWrite(NINA_RTS, LOW);
 #endif
-      }
-    } else {
-      _recvIndex = 0;
-
-      if (_debug) {
-        _debug->println(b, HEX);
-      }
+                } else {
+                    _recvIndex = 0;
+                }
+            } else if ((3 + _recvBuffer[2]) > sizeof(_recvBuffer) - 1) {
+                if (_debug) {
+                    _debug->print("Event too big: "), _debug->println(3 + _recvBuffer[2]);
+                    dumpPkt("HCI EVENT RX <- ", _recvIndex, _recvBuffer);
+                    _debug->println();
+                }
+                _recvIndex = 0;
+            }
+        } else {
+            _recvIndex = 0;
+            // if (_debug) _debug->println(b, HEX);
+        }
     }
-  }
 
 #ifdef ARDUINO_AVR_UNO_WIFI_REV2
   digitalWrite(NINA_RTS, HIGH);
@@ -288,9 +340,6 @@ int HCIClass::readLeBufferSize(uint16_t& pktLen, uint8_t& maxPkt)
     pktLen = leBufferSize->pktLen;
     _maxPkt = maxPkt = leBufferSize->maxPkt;
 
-#ifndef __AVR__
-    ATT.setMaxMtu(pktLen - 9); // max pkt len - ACL header size
-#endif
   }
 
   return result;
@@ -1494,10 +1543,12 @@ void HCIClass::dumpPkt(const char* prefix, uint8_t plen, uint8_t pdata[])
 {
   if (_debug) {
     _debug->print(prefix);
+    _debug->print("0000\t");
 
     for (uint8_t i = 0; i < plen; i++) {
       byte b = pdata[i];
 
+      _debug->print(" ");
       if (b < 16) {
         _debug->print("0");
       }
diff --git a/src/utility/HCIUartTransport.cpp b/src/utility/HCIUartTransport.cpp
index 37ce95e..2efee7c 100644
--- a/src/utility/HCIUartTransport.cpp
+++ b/src/utility/HCIUartTransport.cpp
@@ -21,17 +21,7 @@
 
 #include "HCIUartTransport.h"
 
-#if defined(ARDUINO_SAMD_MKRWIFI1010) || defined(ARDUINO_AVR_UNO_WIFI_REV2)
 #define SerialHCI Serial2
-#elif defined(ARDUINO_SAMD_NANO_33_IOT) || defined(ARDUINO_NANO_RP2040_CONNECT)
-// SerialHCI is already defined in the variant
-#elif defined(ARDUINO_PORTENTA_H7_M4)
-// SerialHCI is already defined in the variant
-#elif defined(ARDUINO_PORTENTA_H7_M7) || defined(ARDUINO_NICLA_VISION)
-#define SerialHCI Serial2
-#else
-#error "Unsupported board selected!"
-#endif
 
 HCIUartTransportClass::HCIUartTransportClass(HardwareSerial& uart, unsigned long baudrate) :
   _uart(&uart),
@@ -45,7 +35,7 @@ HCIUartTransportClass::~HCIUartTransportClass()
 
 int HCIUartTransportClass::begin()
 {
-  _uart->begin(_baudrate);
+  _uart->begin(_baudrate, SERIAL_RTSCTS | SERIAL_8N1);
 
   return 1;
 }
@@ -93,11 +83,7 @@ size_t HCIUartTransportClass::write(const uint8_t* data, size_t length)
   return result;
 }
 
-#if defined(ARDUINO_AVR_UNO_WIFI_REV2) || defined(ARDUINO_NANO_RP2040_CONNECT)
-HCIUartTransportClass HCIUartTransport(SerialHCI, 119600);
-#else
-HCIUartTransportClass HCIUartTransport(SerialHCI, 912600);
-#endif
+HCIUartTransportClass HCIUartTransport(SerialHCI, 115200);
 HCITransportInterface& HCITransport = HCIUartTransport;
 
 #endif
diff --git a/src/utility/L2CAPSignaling.cpp b/src/utility/L2CAPSignaling.cpp
index 2ef08b6..6fc1dae 100644
--- a/src/utility/L2CAPSignaling.cpp
+++ b/src/utility/L2CAPSignaling.cpp
@@ -229,10 +229,6 @@ void L2CAPSignalingClass::handleSecurityData(uint16_t connectionHandle, uint8_t
     btct.printBytes(U,32);
     Serial.print("V      : ");
     btct.printBytes(V,32);
-    Serial.print("X      : ");
-    btct.printBytes(X,16);
-    Serial.print("Y      : ");
-    btct.printBytes(Y,16);
     Serial.print("g2res  : ");
     btct.printBytes(g2Result,4);
     Serial.print("Result : ");
